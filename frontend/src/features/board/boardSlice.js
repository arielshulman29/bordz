import { createAsyncThunk, createSlice } from '@reduxjs/toolkit';
import { updateBoard, createBoard, deleteBoard, fetchAllBoards } from './boardApi';

const initialState = {
  status: 'idle'
};

export const editBoardThunk = createAsyncThunk(
  'boards/editBoard',
  async (id, newBoard) => {
    const response = await updateBoard(id, newBoard);
    return response;
  }
);

export const createNewBoardThunk = createAsyncThunk(
  'boards/createBoard',
  async (newBoard) => {
    const response = await createBoard(newBoard);
    return response;
  }
);


export const deleteBoardThunk = createAsyncThunk(
  'boards/deleteBoard',
  async (id) => {
    const response = await deleteBoard(id);
    // The value we return becomes the `fulfilled` action payload
    return response;
  }
);

export const getAllBoardsThunk = createAsyncThunk(
  'boards/getAllBoards',
  async () => {
    const response = await fetchAllBoards();
    // The value we return becomes the `fulfilled` action payload
    return response;
  }
);



export const boardSlice = createSlice({
  name: 'boards',
  initialState,
  // The `reducers` field lets us define reducers and generate associated actions
  reducers: {
    // increment: (state) => {
    //   // Redux Toolkit allows us to write "mutating" logic in reducers. It
    //   // doesn't actually mutate the state because it uses the Immer library,
    //   // which detects changes to a "draft state" and produces a brand new
    //   // immutable state based off those changes
    //   state.value = 1;
    // },
    // decrement: (state) => {
    //   state.value -= 1;
    // },
    // // Use the PayloadAction type to declare the contents of `action.payload`
    // incrementByAmount: (state, action) => {
    //   state.value += action.payload;
    // },
  },
  // The `extraReducers` field lets the slice handle actions defined elsewhere,
  // including actions generated by createAsyncThunk or in other slices.
  extraReducers: (builder) => {
    builder
      .addCase(createNewBoardThunk.pending, (state) => {
        state.status = 'creating new board';
      })
      .addCase(createNewBoardThunk.fulfilled, (state, action) => {
        state.status = 'new board created';
        state.boards.push(action.payload);
      })
      .addCase(createNewBoardThunk.rejected, (state, action) => {
        state.status = 'error in creating new board';
      })
      .addCase(getAllBoardsThunk.pending, (state) => {
        state.status = 'loading';
      })
      .addCase(getAllBoardsThunk.fulfilled, (state, action) => {
        state.status = 'idle';
        // state.value += action.payload;
        state.boards = action.payload;
      })
  },
});

export default boardSlice.reducer;
